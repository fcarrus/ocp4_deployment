- name: Create installation dirs
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
  loop:
    - "{{ __ocp4_deployment_install_path }}/install"

- name: Include mirror configuration
  when: ocp4_deployment_cluster_configure_mirror | bool
  ansible.builtin.include_tasks: _configure_mirror.yaml

- name: Detect install-config.yaml file
  ansible.builtin.stat:
    path: "{{ __ocp4_deployment_install_path }}/install/install-config.yaml"
  register: install_config_file

- name: Detect install/manifests directory
  ansible.builtin.stat:
    path: "{{ __ocp4_deployment_install_path }}/install/manifests"
  register: install_manifests_directory

- name: Detect ignition files
  ansible.builtin.stat:
    path: "{{ __ocp4_deployment_install_path }}/install/bootstrap.ign"
  register: install_ignition_files

- name: Download openshift-install binary
  delegate_to: localhost
  run_once: true
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    include: "{{ item.include }}"
    creates: "{{ __ocp4_deployment_install_path }}/{{ item.include }}"
  loop:
    - src: "{{ ocp4_deployment_clients_download_mirror }}/openshift-install-linux.tar.gz"
      dest: "{{ __ocp4_deployment_install_path }}/"
      include: openshift-install
    - src: "{{ ocp4_deployment_clients_download_mirror }}/openshift-client-linux.tar.gz"
      dest: "{{ __ocp4_deployment_install_path }}/"
      include: oc

- name: Combine additional pull secrets
  ansible.builtin.set_fact:
    ocp4_deployment_cluster_pull_secrets_combined:
      auths: "{{
          (ocp4_deployment_cluster_pull_secret | from_json).auths | combine(
            ocp4_deployment_cluster_pull_secrets_combined.auths | d({}) | combine({
              item.hostname: {
                'auth': (item.username + ':' + item.password) | b64encode,
                'email': item.email | d('none@example.com')
              }
            })
          )
        }}"
  loop: "{{ ocp4_deployment_cluster_additional_pull_secrets | d([]) }}"

- name: If install-config does not exist yet
  when:
    - "not install_config_file.stat.exists"
    - "not install_manifests_directory.stat.exists"
    - "not install_ignition_files.stat.exists"
  block:

    - name: Create install-config.yaml file
      ansible.builtin.template:
        src: install-config.yaml.j2
        dest: "{{ __ocp4_deployment_install_path }}/install/install-config.yaml"

    - name: Backup install-config file
      ansible.builtin.copy:
        src: "{{ __ocp4_deployment_install_path }}/install/install-config.yaml"
        dest: "{{ __ocp4_deployment_install_path }}/install-config_bak.yaml"
        remote_src: true

- name: If manifests do not exist yet
  when:
    - "not install_manifests_directory.stat.exists"
    - "not install_ignition_files.stat.exists"
  block:

    - name: Generate manifest files
      ansible.builtin.command:
        chdir: "{{ __ocp4_deployment_install_path }}"
        cmd: "{{ __ocp4_deployment_install_path }}/openshift-install create manifests --dir=./install/"
      changed_when: true

    - name: Remove machineset definitions
      when: ocp4_deployment_is_upi | bool
      ansible.builtin.shell:
        chdir: "{{ __ocp4_deployment_install_path }}"
        cmd: rm -vf ./install/openshift/99_openshift-cluster-api_master-machines-*.yaml
        # ./install/openshift/99_openshift-cluster-api_worker-machineset-*.yaml
      changed_when: true

    - name: Create ImageContentSourcePolicy
      when: ocp4_deployment_imagecontentsourcepolicy is defined
      ansible.builtin.copy:
        dest: "{{ __ocp4_deployment_install_path }}/install/manifests/mirror-0.yaml"
        content: "{{ ocp4_deployment_imagecontentsourcepolicy | to_yaml }}"

    - name: If Control Plane has High Availability
      when:
        - ocp4_deployment_cluster_flavor == 'standard'
        - ocp4_deployment_is_upi | bool
      block:

        - name: Set masters as unschedulable
          ansible.builtin.lineinfile:
            path: "{{ __ocp4_deployment_install_path }}/install/manifests/cluster-scheduler-02-config.yml"
            regexp: "^  mastersSchedulable: true$"
            line: "  mastersSchedulable: false"

        - name: Load auto approver objects files
          ansible.builtin.copy:
            dest: "{{ __ocp4_deployment_install_path }}/install/manifests/"
            src: "{{ item }}"
          loop:
            - cap-clusterrole.yaml
            - cap-clusterrolebinding.yaml
            - cap-namespace.yaml
            - cap-serviceaccount.yaml

        - name: Load auto approver objects templates
          ansible.builtin.template:
            dest: "{{ __ocp4_deployment_install_path }}/install/manifests/{{ item }}"
            src: "{{ item }}.j2"
          loop:
            - cap-deployment.yaml
            - cap-configmap.yaml

    - name: If Infra nodes are defined
      when: groups.infra_nodes | d([]) | length > 0
      block:

        - name: Deploy IngressController manifest
          ansible.builtin.template:
            dest: "{{ __ocp4_deployment_install_path }}/install/manifests/default-ingresscontroller.yaml"
            src: default-ingresscontroller.j2

    - name: Load chrony template
      ansible.builtin.template:
        dest: "{{ __ocp4_deployment_install_path }}/install/manifests/{{ item }}s-chrony-configuration.yaml"
        src: chrony-machine-config.j2
      loop:
        - master
        - worker

- name: If ignition files do not exist yet
  when:
    - "not install_ignition_files.stat.exists"
  block:

    - name: Generate ignition files
      ansible.builtin.command:
        chdir: "{{ __ocp4_deployment_install_path }}"
        cmd: "{{ __ocp4_deployment_install_path }}/openshift-install create ignition-configs --dir=./install/"
      changed_when: true

# code: language=ansible
