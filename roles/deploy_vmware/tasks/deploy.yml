- name: Check Cluster Deployment Status
  delegate_to: localhost
  when: inventory_hostname in groups.bootstrap
  check_mode: false
  ansible.builtin.uri:
    url: "{{ ocp4_deployment_cluster_api_health_url }}"
    validate_certs: false
    status_code:
      - 200
    timeout: 10
    return_content: true
  register: _ocp4_deployment_cluster_is_healthy
  failed_when: false

- name: Look for existing Machines
  delegate_to: localhost
  community.vmware.vmware_guest_info:
    hostname: "{{ ocp4_deployment_vmware_vcenter_hostname }}"
    username: "{{ ocp4_deployment_vmware_vcenter_username }}"
    password: "{{ ocp4_deployment_vmware_vcenter_password }}"
    datacenter: "{{ ocp4_deployment_vmware_datacenter }}"
    validate_certs: false
    name: "{{ inventory_hostname }}"

  register: vmware_vm_info
  failed_when: false

- name: If VM does not exist, create it
  when: '"instance" not in vmware_vm_info'
  block:
    - name: Get ignition file contents
      vars:
        ignition_filename: "{{
            (inventory_hostname in groups.bootstrap)    | ternary( 'bootstrap.ign',
            (inventory_hostname in groups.master_nodes) | ternary( 'master.ign',
                                                                   'worker.ign'
            ))
          }}"
      delegate_to: localhost
      ansible.builtin.slurp:
        src: "{{ __ocp4_deployment_install_path }}/install/{{ ignition_filename }}"
      register: ignition_file
      no_log: true

    - name: Create Node VMs
      delegate_to: localhost
      when: |
        inventory_hostname in groups.bootstrap and _ocp4_deployment_cluster_is_healthy.status != 200
          or
        inventory_hostname in (groups.master_nodes + groups.infra_nodes + groups.worker_nodes + groups.storage_nodes)
      community.vmware.vmware_guest:
        hostname: "{{ ocp4_deployment_vmware_vcenter_hostname }}"
        username: "{{ ocp4_deployment_vmware_vcenter_username }}"
        password: "{{ ocp4_deployment_vmware_vcenter_password }}"
        cluster: "{{ ocp4_deployment_vmware_cluster }}"
        datacenter: "{{ ocp4_deployment_vmware_datacenter }}"
        datastore: "{{ ocp4_deployment_vmware_datastore }}"
        validate_certs: false
        disk: "{{ ocp4_deployment_nodes_vmware_disks }}"
        folder: "/{{ ocp4_deployment_vmware_datacenter }}/vm{{ ocp4_deployment_vmware_vcenter_folder }}/{{ ocp4_deployment_vmware_vcenter_create_subfolder | d('') }}"
        guest_id: coreos64Guest
        hardware: "{{ ocp4_deployment_nodes_vmware_hardware }}"
        name: "{{ ocp4_deployment_nodes_fqdn | d(inventory_hostname) }}"
        state: poweredon
        template: "RHCOS-{{ ocp4_deployment_cluster_rhcos_version }}-Template"
        advanced_settings:
          - key: "guestinfo.ignition.config.data"
            value: "{{ ignition_file.content }}"
          - key: "guestinfo.ignition.config.data.encoding"
            value: base64
          - key: "disk.EnableUUID"
            value: "TRUE"
          - key: "guestinfo.afterburn.initrd.network-kargs"
            value: >
              ip={{ [
                      ocp4_deployment_nodes_ipaddress,
                      '',
                      ocp4_deployment_nodes_gateway | d(''),
                      ocp4_deployment_nodes_netmask,
                      ocp4_deployment_nodes_fqdn | d(inventory_hostname),
                      '',
                      'none'
                    ] | join(':') }}
              {{ ['nameserver'] | product(ocp4_deployment_nodes_dns_servers) | map('join', '=') | join(' ') }}
              {{ ['rd.route'] | product(ocp4_deployment_nodes_static_routes | d([])) | map('join', '=') | join(' ') }}

- name: If VM exists, apply changes
  when: '"instance" in vmware_vm_info'
  delegate_to: localhost
  community.vmware.vmware_guest:
    hostname: "{{ ocp4_deployment_vmware_vcenter_hostname }}"
    username: "{{ ocp4_deployment_vmware_vcenter_username }}"
    password: "{{ ocp4_deployment_vmware_vcenter_password }}"
    validate_certs: false
    disk: "{{ ocp4_deployment_nodes_vmware_disks }}"
    hardware: "{{ ocp4_deployment_nodes_vmware_hardware }}"
    name: "{{ ocp4_deployment_nodes_fqdn | d(inventory_hostname) }}"
    # state: poweredon

# code: language=ansible
