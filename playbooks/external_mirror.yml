- name: Configure External Image Mirror
  hosts: mirrorserver
  become: true
  gather_facts: false
  vars:
    __ocp4_deployment_install_path: "{{ ocp4_deployment_install_path | d('/ocp4-deployment/') }}"
    __ocp4_deployment_mirror_install_dir: "{{ ocp4_deployment_mirror_install_dir | d('~/quay-install') }}"
  tasks:

    - name: Download Quay Mirror Installer
      ansible.builtin.unarchive:
        remote_src: true
        src: "{{
            ocp4_deployment_mirror_bundle_url |
            d('https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/mirror-registry/1.3.8/mirror-registry.tar.gz')
          }}"
        dest: '~'
        creates: ~/mirror-registry
        mode: 0755
        owner: root
        group: root

    - name: Download oc-mirror Executable
      ansible.builtin.unarchive:
        remote_src: true
        src: "{{
            ocp4_deployment_mirror_client_url |
            d('https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/oc-mirror.tar.gz')
          }}"
        dest: '~'
        creates: ~/oc-mirror
        mode: 0755
        owner: root
        group: root

    - name: Create .docker directory
      ansible.builtin.file:
        path: ~/.docker
        state: directory
        mode: 0750
        owner: root
        group: root

    - name: Save Authentication File
      vars:
        _ocp4_deployment_mirror_credentials:
          auths: "{{ (ocp4_deployment_cluster_pull_secret | from_json).auths | combine ({
            inventory_hostname+':8443': {
              'auth': (ocp4_deployment_mirror_username + ':' + ocp4_deployment_mirror_password) | b64encode,
              'email': 'oc-mirror@'+inventory_hostname
            }
            }) }}"
      ansible.builtin.copy:
        dest: "~/.docker/config.json"
        content: "{{ _ocp4_deployment_mirror_credentials | to_json }}"
        mode: 0640
        owner: root
        group: root

    - name: Create imageset-config.yaml File
      ansible.builtin.copy:
        dest: ~/imageset-config.yaml
        mode: 0644
        owner: root
        group: root
        content: |
          kind: ImageSetConfiguration
          apiVersion: mirror.openshift.io/v1alpha2
          storageConfig:
            registry:
              imageURL: {{ inventory_hostname }}:8443/mirror/oc-mirror-metadata
              skipTLS: true
          mirror:
            platform:
              channels:
              - name: stable-{{ ocp4_deployment_cluster_version | split('.') | slice(2) | first | join('.') }}
                type: ocp
                minVersion: {{ ocp4_deployment_cluster_version }}
                maxVersion: {{ ocp4_deployment_cluster_version }}
                shortestPath: true
            operators: []
            additionalImages: []
            helm: {}

    - name: Enable Firewall Rules for Quay Endpoint
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      loop:
        - 8443/tcp
      failed_when: false  # TODO: Check for Firewalld first

    - name: Check Quay Instance Status
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}:8443/health/instance"
        validate_certs: false
      register: _ocp_deployment_mirror_status
      failed_when: false

    - name: Run Quay Installer
      when: _ocp_deployment_mirror_status.status != 200
      ansible.builtin.command:
        chdir: '~'
        cmd: >-
          ~/mirror-registry install
          --initUser {{ ocp4_deployment_mirror_username | d('admin') }}
          --initPassword {{ ocp4_deployment_mirror_password | d('password') }}
          --quayHostname {{ inventory_hostname }}
          --quayRoot {{ ocp4_deployment_mirror_install_dir | d('~/quay-install') }}
          -c
      changed_when: true
      async: 1200 # 20min
      poll: 10    # check every 10s

    - name: Clean up software tar files
      ansible.builtin.file:
        state: absent
        path: "~/{{ item }}"
      loop:
        - image-archive.tar
        - execution-environment.tar
        - quay.tar
        - redis.tar
        - postgres.tar
        - pause.tar

    - name: Retrieve Quay CA
      ansible.builtin.fetch:
        src: "{{ __ocp4_deployment_mirror_install_dir }}/quay-rootCA/rootCA.pem"
        dest: "{{ __ocp4_deployment_install_path }}/quayCA.crt"
        flat: true

    - name: Run Image Mirroring
      ansible.builtin.command:
        chdir: '~'
        cmd: >-
          ~/oc-mirror
          --dest-skip-tls
          --config=imageset-config.yaml
          docker://{{ inventory_hostname }}:8443
      changed_when: true
      async: 3600 # 1h
      poll: 10    # check every 60s

# code: language=ansible
